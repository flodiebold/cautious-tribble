name: CI
on:
  pull_request:
  push:
    branches:
      - master
      - staging
      - trying

jobs:
  rust:
    name: Rust
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: 1
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt

      - name: Cargo target cache
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Compile binaries
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Compile tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run

      - name: Setup Minikube
        id: minikube
        uses: CodingNagger/minikube-setup-action@v1.0.2

      - name: Launch Minikube
        run: eval ${{ steps.minikube.outputs.launcher }}

      - name: Build test images
        run: integration_test/images/build.sh

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Prepare build directory for cache
        run: |
          find ./target/debug -maxdepth 1 -type f -delete && \
          rm -fr ./target/debug/{deps,.fingerprint}/{aggregator-*,common-*,deployer-*,transitioner-*,git_fixture-*,integration_test-*} && \
          rm -f  ./target/.rustc_info.json
  type-script:
    name: TypeScript
    runs-on: ubuntu-latest
    env:
      CXX: g++-4.9
      CC: gcc-4.9
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: yarn install
        working-directory: ./ui
      - run: yarn format-check
        working-directory: ./ui
      - run: yarn ts-build
        working-directory: ./ui
      - run: yarn lint
        working-directory: ./ui
