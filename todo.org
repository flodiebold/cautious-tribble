* deployer
** DONE pull from versions repo, compare & deploy against mocked backend
   CLOSED: [2018-02-11 So 13:00]
** DONE compare & deploy with real k8s
   CLOSED: [2018-02-18 So 18:42]
** DONE when a deployment fails, continue deploying the rest of the services
   CLOSED: [2018-02-22 Do 21:15]
** DONE support multiple envs
   CLOSED: [2018-02-22 Do 22:38]
 - deploy to different k8s namespaces
** DONE configuration
   CLOSED: [2018-02-25 So 18:03]
 - versions repo url (+ credentials)
 - versions repo checkout path
 - deployers per env
   - kubeconfig
   - namespace
 - specify config path on command line
** DONE add health resource
   CLOSED: [2018-04-01 So 17:14]
** DONE add status resource
   CLOSED: [2018-04-01 So 17:14]
** DONE check actual rollout status for status resource
   CLOSED: [2018-04-06 Fr 20:03]
** DONE integration test
   CLOSED: [2018-04-12 Do 20:18]
** DONE report more status information in status resource
   CLOSED: [2018-04-12 Do 20:18]
 - rollout status per (rolling-out) deployment
 - rollout status reason per deployment
 - detailed error information per deployment
** DONE support multiple clusters
   CLOSED: [2018-05-24 Do 20:19]
 - make sure kubectl apply uses same config...
** DONE support deploying services
   CLOSED: [2018-06-24 So 16:47]
** DONE support deploying configmaps
   CLOSED: [2018-06-24 So 16:47]
** DONE support deploying secrets
   CLOSED: [2018-06-24 So 16:47]
** DONE allow arbitrary subdirs in versions repo
   CLOSED: [2018-07-12 Do 22:25]
** DONE make runnable as CLI tool
   CLOSED: [2018-05-31 Thu 23:29]
  - command `serve` to run as service
  - command `check` to do dry run
  - command `deploy` to deploy
** DONE implement separated version files
   CLOSED: [2018-08-04 Sa 20:45]
** TODO improve error handling
 - report errors in yaml parsing etc. on the deployable status
** TODO when a deployment fails with 400 or similar, cache that and don't try again until it changes
 - that means more state though... maybe just rely on validation
 - maybe do exponential backoff for 400s
** TODO integration-test configmap & secret deployment
** TODO reload config on every loop
** TODO fix signal handling
use https://docs.rs/signal-hook/0.1.0/signal_hook/
** TODO support jsonnet
 - [ ] implement import handler
 - [ ] correctly determine change version, even through imports
** Maybe now
*** TODO better version file merging
*** TODO validate yamls before deploying
  - allow disabling validation by yaml
  - detect k8s version automatically?
  - maybe https://gitlab.com/silwol/juster
** Later
*** TODO add dry run mode (default for CLI)
*** TODO add full diff mode that compares all resources with what would be deployed
  - in CLI mode, show diffs using treediff crate
  - fall back automatically to this for resources that don't have an annotation
  - don't deploy if the diff contains nothing
*** TODO cli: add nicer output
  - json output with -o json
  - table otherwise
  - expect only one env by default, all envs with option
  - show commit message of the deployed / to deploy commit for each resource
*** TODO allow reading from file system instead of git in CLI mode
*** TODO check rollout status of configmap to all nodes
  - somehow?
*** TODO support deploying daemonsets
  - restart pods?
*** TODO support deploying ingresses
*** TODO support deploying cron jobs
*** TODO support deploying namespaces
  - create before other stuff
*** TODO roll deployments when configmaps change?
*** TODO just use blob OIDs instead of earliest commit?
*** TODO handle undeploying something
 is that a use case though?
*** TODO do resource patching without kubectl?
  - makes diffs more reliable
  - API support in https://github.com/kubernetes/features/issues/555

 See also:
 kubectl diff -- https://github.com/kubernetes/features/issues/491
 current kubectl code -- https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/jsonmergepatch/patch.go
*** TODO use k8s api instead of relying on kubectl for deployment
*** TODO allow complete deployment stop for an env (i.e. disabling a deployer)
  - although that becomes a problem when you have something you really want deployed anyway
  - in that case you could maybe deploy it via command-line
*** TODO validate & report validation status for envs that aren't actually deployed (i.e. 'latest')
  - handle as 'just validation' Deployer?
* transition manager
** DONE pull from versions repo regularly
   CLOSED: [2018-02-12 Mo 23:03]
** DONE transition from one env to the other
   CLOSED: [2018-02-13 Di 23:21]
** DONE add per-env locks; don't apply transitions where the target is locked
   CLOSED: [2018-02-24 Sa 17:55]
** DONE refactor git handling code
   CLOSED: [2018-02-25 So 16:56]
** DONE configuration
   CLOSED: [2018-02-25 So 18:03]
 - versions repo url (+ credentials)
 - versions repo checkout path
 - transitions
 - specify config path on command line
** DONE add deployer status condition
   CLOSED: [2018-04-19 Do 22:28]
** DONE add scheduled transitions
   CLOSED: [2018-05-31 Do 19:39]
** DONE allow arbitrary subdirs in versions repo
   CLOSED: [2018-07-12 Do 22:25]
** DONE switch to cron master, build on stable again
   CLOSED: [2018-08-06 Mo 23:04]
** DONE add status resource
   CLOSED: [2018-08-10 Fr 23:01]
 - report time of last actual run for each transition
 - report commit ID of last actual run for each transition
 - report time and status of last check for each transition
** DONE add informative trailers to created commits
   CLOSED: [2018-10-14 So 19:35]
DM-Type: Transition
DM-Transition-Name: pp
DM-Source: dev
DM-Target: pp
** DONE more details for Blocked and Failed transition status
   CLOSED: [2018-10-31 Mi 20:40]
** TODO add unlock after transition
** TODO allow restricting transitions to subdirs
** TODO add per-resource locks
** TODO Copy logs from commits when transitioning
  - maybe the aggregator is a better place for that
** TODO handle remote callbacks during push and use push_update_reference
 - and handle push conficts
** TODO don't transition resources that don't have a base file in the target env
** TODO fix signal handling
** TODO don't log stack traces for connection failures etc.
 - log error on info level
 - keep last error for transition status info
** TODO move transition config to versions repo?
 - maybe different branch?
** Later
*** TODO add jenkins checks
*** TODO add k8s job checks
*** TODO add manual confirm check
*** TODO reload config on every loop
*** TODO make runnable as CLI tool
*** TODO add dry run mode
*** TODO allow specifying that a check should only prevent the problematic resources from being transitioned
 i.e. validation failures in latest should prevent only those services from being deployed
* integration tests
** DONE fix hard-coded ports and namespaces, so the tests can run in parallel
   CLOSED: [2018-04-01 So 19:22]
** DONE create namespaces
   CLOSED: [2018-04-01 So 19:22]
** DONE tear down created namespaces afterwards
   CLOSED: [2018-04-01 So 19:48]
** DONE check that service is deployed
   CLOSED: [2018-04-01 So 19:48]
** DONE add script that handles minikube setup & teardown
   CLOSED: [2018-04-05 Do 23:09]
** DONE fix sometimes failing integration test
   CLOSED: [2018-04-12 Do 18:57]
 - retry 'connection refused' because apparently the nodeport sometimes takes a while to open
** DONE check deployed version
   CLOSED: [2018-04-12 Do 20:18]
** TODO improve output
 - save service logs to files
 - save stderr of run commands to files
 - just output some nice progress info, + error logs
 - omit progress logs when nothing changes when waiting for something
** TODO fix signal handling
** TODO deploy the deployer & transitioner into the test cluster?
** TODO test with different k8s versions
** playground
*** TODO allow using real kubernetes
*** TODO allow using different config?
*** TODO restart services when they are rebuilt (or killed for any reason)
** test cases
*** deployer
**** when I add a service in dev, the deployer deploys it
**** when I change a service in dev, the deployer updates it
**** when I add/change multiple services at the same time, the deployer updates all of them
**** when K8s is not reachable, the deployer tries again and deploys as soon as it's back again
*** transitioner
**** when I add/change a service in available, the transitioner copies it to dev
**** when I add/change a service in available and dev is locked, the transitioner does not copy it to dev
**** when dev is unlocked, the transitioner mirrors any pending changes from available
*** deployer + transitioner
**** when I change a service in available, it first gets deployed to dev. Then, when the deployment was successful, it gets deployed to pp
**** when a deployment to dev is not successful, it is not mirrored to pp
**** I can have the deployer redeploy itself and the transitioner
* aggregator
** DONE get current deployer state
   CLOSED: [2018-08-12 So 21:18]
** DONE notify about changes via websocket / h2
   CLOSED: [2018-08-12 So 21:18]
** DONE when opening the websocket, send full current status
   CLOSED: [2018-08-18 Sa 20:46]
** DONE get current versions repo state & watch for changes
   CLOSED: [2018-09-04 Di 14:48]
 - which resources exist (in current version for now)
 - for each resource:
   - name
   - type (from latest env?)
   - content & whether it's versioned
   - metadata / labels (only from latest env?)
 - aggregated / interpreted changes (see below)
** DONE serve ui
   CLOSED: [2019-05-16 Do 19:53]
** TODO fix cpu usage / refactor message distribution
** TODO fix hardcoded list of envs
** TODO test commit analysis
** TODO integrationtest websocket updates
** Maybe
*** TODO provide config information (in particular, transitions)
  - transition config should maybe be in the versions repo anyway
  - also what envs have deployers
*** TODO aggregate transition status from versions repo & transitioner status (& configuration)
** Later
*** TODO further commit analysis
  - transition info from commit message trailers
  - locks/unlocks
  - transition schedule
  - transition config changes (when moved there)
*** TODO send smaller updates
*** TODO add endpoints to lock envs & resources
*** TODO add endpoint to create new version
*** TODO more resource info
  - type
  - metadata / labels
*** TODO include current state in served UI html
*** TODO graceful shutdown
warp: bind_with_graceful_shutdown
*** TODO make sure aggregator & ui work and make sense without transitioner
* ui
** DONE add tslint setup
   CLOSED: [2018-08-30 Do 20:38]
** DONE show list of resources
   CLOSED: [2018-09-04 Di 15:27]
** DONE show histories for resources
   CLOSED: [2018-10-14 So 19:33]
** DONE show version deployed according to version repo as bubble
   CLOSED: [2018-11-03 Sa 11:50]
** DONE allow reverting resources to a previous version
   CLOSED: [2019-01-10 Do 21:48]
** TODO allow locking environments
 - require giving message
** TODO allow locking resources
 - allow locking a service at the same time as deploying it
** TODO show deployment status of each resource
 - show spinner if still deploying (including if the deployer hasn't caught up yet)
 - show error symbol for errors
** TODO show deployment status details (e.g. error messages)
 - resource details dialog
** TODO fix hack hiding 'latest'
 - both in resource view (bubbles) and in history view ("updated on" lines)
 - maybe instead base it on whether there's a deployer for the env?
** TODO show lock status of each env
 - left menu
** TODO show lock status of each resource
** Later
*** TODO show base data history for resource
  - needs to be per env
  - resource details dialog?
*** TODO show transition status
  - including detailed check status
  -> env page for the target env?
*** TODO show version history of an env
  - allow filtering history tab by env
*** TODO allow filtering history tab by resource?
*** TODO allow searching resources by labels
*** TODO in deploy dialog, check and disable checkboxes for envs where the version is currently deployed
*** TODO add unit tests
*** TODO reconnect websocket after losing connection
*** TODO oauth support
** resources tab
** history tab
  - filter by env, event type, resources
*** DONE remove trailers from messages
    CLOSED: [2018-11-08 Do 20:10]
*** DONE add times
    CLOSED: [2018-11-08 Do 20:10]
* general
** DONE set up rustfmt
   CLOSED: [2018-07-21 Sa 14:55]
** DONE set up CI
   CLOSED: [2018-07-21 Sa 14:54]
** DONE update rustfmt
   CLOSED: [2018-08-04 Sa 21:16]
** DONE set up bors
   CLOSED: [2018-08-30 Do 20:20]
https://bors.tech/
** DONE script to automatically set up 'playground'
   CLOSED: [2018-10-14 So 19:42]
 - all parts running
 - versions repo set up & some resources defined
 - automatically recompile & restart services when making changes
** DONE build static binaries & docker images
   CLOSED: [2019-02-14 Do 21:12]
https://blog.semicolonsoftware.de/building-minimal-docker-containers-for-rust-applications/
 - need to add kubectl (copy from docker image?)
** DONE figure out git authentication (+ installation)
   CLOSED: [2019-08-15 Do 20:15]
ssh-keygen -t rsa -b 4096 -C "cautious-tribble" (-f ./id_rsa -N "" ?)
kubectl create secret generic ssh-key-secret --from-file=id_rsa=./id_rsa --from-file=id_rsa.pub=./id_rsa.pub
or generate during installation?
 - add endpoint to get public key fingerprint?
** TODO installation procedure
 - automatically initialize version repo? (with a readme, config file, file for DM deployments)
** TODO kubernetes setup
*** TODO handle helm --namespace?
*** TODO bootstrap to DM
*** Command:
helm template dm --name dm --set global.versionsRepoUrl=git@github.com:flodiebold/resource-repo-test.git --set aggregator.service.type=NodePort | kubectl apply -f -
*** Command for testing with local image:
docker build -f ./Dockerfile -t flodiebold/cautious-tribble:test . && docker push flodiebold/cautious-tribble:test
helm template dm --name dm --set global.versionsRepoUrl=git@github.com:flodiebold/resource-repo-test.git --set aggregator.service.type=NodePort --set global.image.tag=test --set global.image.pullPolicy=Always | kubectl apply -f -
** TODO documentation
 - update readme
** TODO slack integration
 - slack transitions (both big ones like pp->prod, and constant ones like dev and pp deployments)
 - slack bot that can deploy and lock
 - this could be its own service that watches the aggregator change feed
** Later
*** TODO reload configs regularly
*** TODO contribution issues
*** TODO add structured logging
*** TODO test coverage
*** TODO datadog integration (events when deploying / transitioning, ...)
*** TODO contribute to cron library
  - add Clone
  - add Deserialize
*** TODO add cli option to write version update (for use in push job)
  - include commit messages since the last version
  - request last version known by dm via api, post new version via api
* later
** Allow scaling down & locking deployments temporarily
** Canaries
 - automatically deploy new versions as canaries if so configured
 - show canary status in UI
 - allow deploying certain versions as canary manually
 - allow setting canary status manually
 - integrate kayenta
** Staging namespaces / overlays
* refactoring
** DONE factor out some common git helpers?
   CLOSED: [2018-02-25 So 00:16]
 - nice "zipper" interface for tree building / walking?
** DONE abstract out the git stuff more
   CLOSED: [2018-08-05 So 17:53]
** DONE use json data structures instead of yaml (convert immediately when reading yaml)
   CLOSED: [2018-08-05 So 20:15]
** DONE clean up naming
   CLOSED: [2018-08-11 Sa 17:32]
 - deployable / deployment -> resource
** DONE move certain configuration to env (and the rest to the repo)
   CLOSED: [2019-05-16 Do 19:59]
** TODO use https://github.com/tcr/wasm-typescript-definition
** TODO use ResourceRepo abstraction in transitioner as well
** TODO clean up resource name vs. file name confusion
** TODO call versions repo resource repo everywhere
** TODO remove the need for refs/dm_head, instead directly work with commit IDs?
** TODO switch to result-in-main / exitfailure
** TODO switch to kubernetes-rust, upgrade k8s-openapi
** TODO use thunder?
** TODO use fail in testing?
** TODO use assert_fs?
https://crates.io/crates/assert_fs
** TODO use async/await
* alternatives for version file merge method
** text substitution:
*** version file e.g.:
version: 123abc
*** base file:
apiVersion: extensions/v1beta1
kind: Deployment
...
spec:
  ...
  template:
    ...
    spec:
      containers:
      - name: service
        image: exampleservice:$version
** json pointer:
*** version file e.g.:
"/spec/template/spec/containers/0/image": "exampleservice:123abc"
*** base file does not contain image at all
** json pointer + container references:
*** version file e.g.:
containers:
  service:
    "/image": "exampleservice:123abc"
