* deployer
** DONE pull from versions repo, compare & deploy against mocked backend
   CLOSED: [2018-02-11 So 13:00]
** DONE compare & deploy with real k8s
   CLOSED: [2018-02-18 So 18:42]
** DONE when a deployment fails, continue deploying the rest of the services
   CLOSED: [2018-02-22 Do 21:15]
** DONE support multiple envs
   CLOSED: [2018-02-22 Do 22:38]
 - deploy to different k8s namespaces
** DONE configuration
   CLOSED: [2018-02-25 So 18:03]
 - versions repo url (+ credentials)
 - versions repo checkout path
 - deployers per env
   - kubeconfig
   - namespace
 - specify config path on command line
** DONE add health resource
   CLOSED: [2018-04-01 So 17:14]
** DONE add status resource
   CLOSED: [2018-04-01 So 17:14]
** DONE check actual rollout status for status resource
   CLOSED: [2018-04-06 Fr 20:03]
** DONE integration test
   CLOSED: [2018-04-12 Do 20:18]
** DONE report more status information in status resource
   CLOSED: [2018-04-12 Do 20:18]
 - rollout status per (rolling-out) deployment
 - rollout status reason per deployment
 - detailed error information per deployment
** DONE support multiple clusters
   CLOSED: [2018-05-24 Do 20:19]
 - make sure kubectl apply uses same config...
** DONE support deploying services
   CLOSED: [2018-06-24 So 16:47]
** DONE support deploying configmaps
   CLOSED: [2018-06-24 So 16:47]
** DONE support deploying secrets
   CLOSED: [2018-06-24 So 16:47]
** DONE allow arbitrary subdirs in versions repo
   CLOSED: [2018-07-12 Do 22:25]
** DONE make runnable as CLI tool
   CLOSED: [2018-05-31 Thu 23:29]
  - command `serve` to run as service
  - command `check` to do dry run
  - command `deploy` to deploy
** TODO add dry run mode (default for CLI)
** TODO add full diff mode that compares all deployables with what would be deployed
 - in CLI mode, show diffs using treediff crate
 - fall back automatically to this for deployables that don't have an annotation
 - don't deploy if the diff contains nothing
** TODO cli: add nicer output
 - json output with -o json
 - table otherwise
 - expect only one env by default, all envs with option
 - show commit message of the deployed / to deploy commit for each deployable
** TODO allow reading from file system instead of git in CLI mode
** TODO allow running deployable content through filter before applying it
** TODO add a simple filter that just sets the image tag?
** TODO integration-test configmap & secret deployment
** TODO check rollout status of configmap to all nodes
** TODO allow running deployment content through filter before applying it
** TODO add a simple filter that just sets the image tag?
** TODO support deploying daemonsets
 - restart pods?
** TODO support deploying ingresses
** TODO support deploying cron jobs
** TODO support deploying namespaces
 - create before other stuff
** TODO roll deployments when configmaps change?
** TODO just use blob OIDs instead of earliest commit?
** TODO handle undeploying something
is that a use case though?
** TODO when a deployment fails with 400 or similar, cache that and don't try again until it changes
** TODO do resource patching without kubectl?
 - makes diffs more reliable
 - API support in https://github.com/kubernetes/features/issues/555

See also:
kubectl diff -- https://github.com/kubernetes/features/issues/491
current kubectl code -- https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/jsonmergepatch/patch.go
** TODO improve error handling
** TODO fix signal handling
use https://docs.rs/signal-hook/0.1.0/signal_hook/
** TODO use k8s api instead of relying on kubectl for deployment
** TODO reload config on every loop
** TODO validate yamls before deploying
* transition manager
** DONE pull from versions repo regularly
   CLOSED: [2018-02-12 Mo 23:03]
** DONE transition from one env to the other
   CLOSED: [2018-02-13 Di 23:21]
** DONE add per-env locks; don't apply transitions where the target is locked
   CLOSED: [2018-02-24 Sa 17:55]
** DONE refactor git handling code
   CLOSED: [2018-02-25 So 16:56]
** DONE configuration
   CLOSED: [2018-02-25 So 18:03]
 - versions repo url (+ credentials)
 - versions repo checkout path
 - transitions
 - specify config path on command line
** DONE add deployer status condition
   CLOSED: [2018-04-19 Do 22:28]
** DONE add scheduled transitions
   CLOSED: [2018-05-31 Do 19:39]
** DONE allow arbitrary subdirs in versions repo
   CLOSED: [2018-07-12 Do 22:25]
** TODO add per-service locks
** TODO add unlock after transition
** TODO add jenkins checks
** TODO add k8s job checks
** TODO add status resource
 - report time of last actual run for each transition
 - report time and status of last check for each transition
** TODO fix signal handling
** TODO handle remote callbacks during push and use push_update_reference
 - and handle push conficts
** TODO reload config on every loop
** TODO allow restricting transitions to subdirs
** TODO make runnable as CLI tool
** TODO add dry run mode
** TODO don't log stack traces for connection failures etc.
* integration tests
** DONE fix hard-coded ports and namespaces, so the tests can run in parallel
   CLOSED: [2018-04-01 So 19:22]
** DONE create namespaces
   CLOSED: [2018-04-01 So 19:22]
** DONE tear down created namespaces afterwards
   CLOSED: [2018-04-01 So 19:48]
** DONE check that service is deployed
   CLOSED: [2018-04-01 So 19:48]
** DONE add script that handles minikube setup & teardown
   CLOSED: [2018-04-05 Do 23:09]
** DONE fix sometimes failing integration test
   CLOSED: [2018-04-12 Do 18:57]
 - retry 'connection refused' because apparently the nodeport sometimes takes a while to open
** DONE check deployed version
   CLOSED: [2018-04-12 Do 20:18]
** TODO improve output
 - save service logs to files
 - save stderr of run commands to files
 - just output some nice progress info, + error logs
 - omit progress logs when nothing changes when waiting for something
** TODO fix signal handling
** TODO deploy the deployer & transitioner into the test cluster?
** test cases
*** deployer
**** when I add a service in dev, the deployer deploys it
**** when I change a service in dev, the deployer updates it
**** when I add/change multiple services at the same time, the deployer updates all of them
**** when K8s is not reachable, the deployer tries again and deploys as soon as it's back again
*** transitioner
**** when I add/change a service in available, the transitioner copies it to dev
**** when I add/change a service in available and dev is locked, the transitioner does not copy it to dev
**** when dev is unlocked, the transitioner mirrors any pending changes from available
*** deployer + transitioner
**** when I change a service in available, it first gets deployed to dev. Then, when the deployment was successful, it gets deployed to pp
**** when a deployment to dev is not successful, it is not mirrored to pp
**** I can have the deployer redeploy itself and the transitioner
* aggregator
** TODO fetch commit histories from repos
** TODO get current k8s state
** TODO watch for changes in versions repo
** TODO notify about changes via websocket / h2
* ui
* general
** DONE set up rustfmt
   CLOSED: [2018-07-21 Sa 14:55]
** DONE set up CI
   CLOSED: [2018-07-21 Sa 14:54]
** TODO set up bors
https://bors.tech/
** TODO build static binaries & docker images
** TODO test coverage
** TODO add structured logging
** TODO slack integration
 - slack transitions (both big ones like pp->prod, and constant ones like dev and pp deployments)
 - slack bot that can deploy and lock
 - this could be its own service that watches the aggregator change feed
** TODO datadog integration (events when deploying / transitioning, ...)
** TODO fork / contribute to cron library
 - make it build on stable
 - add Clone
 - add Deserialize
* later
** Canaries, Staging namespaces / overlays
* refactoring
** DONE factor out some common git helpers?
   CLOSED: [2018-02-25 So 00:16]
 - nice "zipper" interface for tree building / walking?
** TODO remove the need for refs/dm_head, instead directly work with commit IDs?
** TODO switch to result-in-main / exitfailure
** TODO use thunder?
** TODO use fail in testing?
